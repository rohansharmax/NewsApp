{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\creat.LAPTOP-KQT6N5R5\\\\OneDrive\\\\Desktop\\\\site101\\\\newsapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\creat.LAPTOP-KQT6N5R5\\\\OneDrive\\\\Desktop\\\\site101\\\\newsapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useRef, useEffect, forwardRef, useState, useImperativeHandle, createElement } from 'react';\n\nvar noop = function noop() {};\n\nfunction useInterval(callback, delay, immediate) {\n  var savedCallback = useRef(noop);\n  useEffect(function () {\n    savedCallback.current = callback;\n  });\n  useEffect(function () {\n    if (!immediate) return;\n    if (delay === null || delay === false) return;\n    savedCallback.current();\n  }, [immediate]);\n  useEffect(function () {\n    if (delay === null || delay === false) return undefined;\n\n    var tick = function tick() {\n      return savedCallback.current();\n    };\n\n    var id = setInterval(tick, delay);\n    return function () {\n      return clearInterval(id);\n    };\n  }, [delay]);\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nvar LoadingBar = forwardRef(function (_ref, ref) {\n  var progress = _ref.progress,\n      _ref$height = _ref.height,\n      _height = _ref$height === void 0 ? 2 : _ref$height,\n      _ref$className = _ref.className,\n      _className = _ref$className === void 0 ? '' : _ref$className,\n      _ref$color = _ref.color,\n      _color = _ref$color === void 0 ? 'red' : _ref$color,\n      _ref$background = _ref.background,\n      _background = _ref$background === void 0 ? 'transparent' : _ref$background,\n      onLoaderFinished = _ref.onLoaderFinished,\n      _ref$transitionTime = _ref.transitionTime,\n      _transitionTime = _ref$transitionTime === void 0 ? 300 : _ref$transitionTime,\n      _ref$loaderSpeed = _ref.loaderSpeed,\n      _loaderSpeed = _ref$loaderSpeed === void 0 ? 500 : _ref$loaderSpeed,\n      _ref$waitingTime = _ref.waitingTime,\n      _waitingTime = _ref$waitingTime === void 0 ? 1000 : _ref$waitingTime,\n      _ref$shadow = _ref.shadow,\n      _shadow = _ref$shadow === void 0 ? true : _ref$shadow,\n      _ref$containerStyle = _ref.containerStyle,\n      _containerStyle = _ref$containerStyle === void 0 ? {} : _ref$containerStyle,\n      _ref$style = _ref.style,\n      _style = _ref$style === void 0 ? {} : _ref$style,\n      _ref$shadowStyle = _ref.shadowStyle,\n      shadowStyleProp = _ref$shadowStyle === void 0 ? {} : _ref$shadowStyle,\n      _ref$containerClassNa = _ref.containerClassName,\n      _containerClassName = _ref$containerClassNa === void 0 ? '' : _ref$containerClassNa;\n\n  var isMounted = useRef(false);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      localProgress = _useState2[0],\n      localProgressSet = _useState2[1];\n\n  var _useState3 = useState({\n    active: false,\n    startingValue: 20,\n    refreshRate: 1000\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      pressedContinuous = _useState4[0],\n      setPressedContinuous = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      usingProps = _useState6[0],\n      setUsingProps = _useState6[1];\n\n  var _useState7 = useState({\n    active: false,\n    value: 20\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      pressedStaticStart = _useState8[0],\n      setStaticStartPressed = _useState8[1];\n\n  var initialLoaderStyle = {\n    height: '100%',\n    background: _color,\n    transition: \"all \".concat(_loaderSpeed, \"ms ease\"),\n    width: '0%'\n  };\n  var loaderContainerStyle = {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    height: _height,\n    background: _background,\n    zIndex: 99999999999,\n    width: 100 + '%'\n  };\n  var initialShadowStyles = {\n    boxShadow: \"0 0 10px \".concat(_color, \", 0 0 10px \").concat(_color),\n    width: '5%',\n    opacity: 1,\n    position: 'absolute',\n    height: '100%',\n    transition: \"all \".concat(_loaderSpeed, \"ms ease\"),\n    transform: 'rotate(3deg) translate(0px, -4px)',\n    left: '-10rem'\n  };\n\n  var _useState9 = useState(initialLoaderStyle),\n      _useState10 = _slicedToArray(_useState9, 2),\n      loaderStyle = _useState10[0],\n      loaderStyleSet = _useState10[1];\n\n  var _useState11 = useState(initialShadowStyles),\n      _useState12 = _slicedToArray(_useState11, 2),\n      shadowStyle = _useState12[0],\n      shadowStyleSet = _useState12[1];\n\n  useEffect(function () {\n    isMounted.current = true;\n    return function () {\n      isMounted.current = false;\n    };\n  }, []);\n  useImperativeHandle(ref, function () {\n    return {\n      continuousStart: function continuousStart(startingValue) {\n        var refreshRate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n        if (pressedStaticStart.active) return;\n\n        if (usingProps) {\n          console.warn(\"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\");\n          return;\n        }\n\n        var val = startingValue || randomInt(10, 20);\n        setPressedContinuous({\n          active: true,\n          refreshRate: refreshRate,\n          startingValue: startingValue\n        });\n        localProgressSet(val);\n        checkIfFull(val);\n      },\n      staticStart: function staticStart(startingValue) {\n        if (pressedContinuous.active) return;\n\n        if (usingProps) {\n          console.warn(\"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\");\n          return;\n        }\n\n        var val = startingValue || randomInt(30, 50);\n        setStaticStartPressed({\n          active: true,\n          value: val\n        });\n        localProgressSet(val);\n        checkIfFull(val);\n      },\n      complete: function complete() {\n        if (usingProps) {\n          console.warn(\"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\");\n          return;\n        }\n\n        localProgressSet(100);\n        checkIfFull(100);\n      }\n    };\n  });\n  useEffect(function () {\n    loaderStyleSet(_objectSpread({}, loaderStyle, {\n      background: _color\n    }));\n    shadowStyleSet(_objectSpread({}, shadowStyle, {\n      boxShadow: \"0 0 10px \".concat(_color, \", 0 0 5px \").concat(_color)\n    }));\n  }, [_color]);\n  useEffect(function () {\n    if (ref) {\n      if (ref && progress !== undefined) {\n        console.warn('react-top-loading-bar: You can\\'t use both controlling by props and ref methods to control the bar! Please use only props or only ref methods! Ref methods will override props if \"ref\" property is available.');\n        return;\n      }\n\n      checkIfFull(localProgress);\n      setUsingProps(false);\n    } else {\n      if (progress) checkIfFull(progress);\n      setUsingProps(true);\n    }\n  }, [progress]);\n\n  var checkIfFull = function checkIfFull(_progress) {\n    if (_progress >= 100) {\n      loaderStyleSet(_objectSpread({}, loaderStyle, {\n        width: '100%'\n      }));\n\n      if (_shadow) {\n        shadowStyleSet(_objectSpread({}, shadowStyle, {\n          left: _progress - 10 + '%'\n        }));\n      }\n\n      setTimeout(function () {\n        if (!isMounted.current) {\n          return;\n        }\n\n        loaderStyleSet(_objectSpread({}, loaderStyle, {\n          opacity: 0,\n          width: '100%',\n          transition: \"all \".concat(_transitionTime, \"ms ease-out\"),\n          color: _color\n        }));\n        setTimeout(function () {\n          if (!isMounted.current) {\n            return;\n          }\n\n          if (pressedContinuous.active) {\n            setPressedContinuous(_objectSpread({}, pressedContinuous, {\n              active: false\n            }));\n            localProgressSet(0);\n            checkIfFull(0);\n          }\n\n          if (pressedStaticStart.active) {\n            setStaticStartPressed(_objectSpread({}, pressedStaticStart, {\n              active: false\n            }));\n            localProgressSet(0);\n            checkIfFull(0);\n          }\n\n          if (onLoaderFinished) onLoaderFinished();\n          localProgressSet(0);\n          checkIfFull(0);\n        }, _transitionTime);\n      }, _waitingTime);\n    } else {\n      loaderStyleSet(function (_loaderStyle) {\n        return _objectSpread({}, _loaderStyle, {\n          width: _progress + '%',\n          opacity: 1,\n          transition: _progress > 0 ? \"all \".concat(_loaderSpeed, \"ms ease\") : ''\n        });\n      });\n\n      if (_shadow) {\n        shadowStyleSet(_objectSpread({}, shadowStyle, {\n          left: _progress - 5.5 + '%',\n          transition: _progress > 0 ? \"all \".concat(_loaderSpeed, \"ms ease\") : ''\n        }));\n      }\n    }\n  };\n\n  useInterval(function () {\n    var random = randomInt(10, 20);\n\n    if (localProgress + random < 90) {\n      localProgressSet(localProgress + random);\n      checkIfFull(localProgress + random);\n    }\n  }, pressedContinuous.active ? pressedContinuous.refreshRate : null);\n  return createElement(\"div\", {\n    className: _containerClassName,\n    style: _objectSpread({}, loaderContainerStyle, _containerStyle)\n  }, createElement(\"div\", {\n    className: _className,\n    style: _objectSpread({}, loaderStyle, _style)\n  }, _shadow ? createElement(\"div\", {\n    style: _objectSpread({}, shadowStyle, shadowStyleProp)\n  }) : null));\n});\nexport default LoadingBar;","map":null,"metadata":{},"sourceType":"module"}